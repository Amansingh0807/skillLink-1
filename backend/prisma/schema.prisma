// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
 id Int @id @default(autoincrement())
 name String @db.VarChar(25)
 username String @unique @db.VarChar(8)
 email String @unique @db.VarChar(255)
 password String
 profile Profile?
 post Post[]
 job Job[]
 comments  Comment[] @relation("UserComments")
}
model Profile{
  id Int @id @default(autoincrement())
  bio String?
  profilePic String?
  skills String[] @db.VarChar(10)
  userId Int @unique
  user User @relation(fields: [userId],references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model Post{
  id Int @id @default(autoincrement())
  desc String @db.VarChar(255)
  contentType String[] @db.VarChar(10) 
  like Int
  comment Comment[]
  authorId  Int
  User User @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model Comment {
  id          Int       @id @default(autoincrement())
  desc        String    @db.VarChar(255)
  like        Int
  authorId    Int
  postId      Int
  parentId    Int?      // Reference to the parent comment (nullable for top-level comments)

  Post        Post      @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Author      User      @relation("UserComments",fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id]) // Self-referencing relation

  // This relation allows the comment to have multiple replies
  replies     Comment[] @relation("CommentReplies")
}
model Job {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(100)
  description String    @db.Text
  location    String    @db.VarChar(100)
  jobType     JobType   
  salary      Float?
  postedAt    DateTime  @default(now())
  isActive    Boolean   @default(true)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}